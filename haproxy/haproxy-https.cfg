#---------------------------------------------------------------------
# Example configuration for a possible web application. 
#   https://github.com/haproxytech/haproxy-docker-ubuntu/blob/master/2.1/haproxy.cfg
# 
# See the full configuration options online.
#
#   https://www.haproxy.org/download/2.1/doc/configuration.txt
#   https://cbonte.github.io/haproxy-dconv/2.1/configuration.html
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log stdout  format raw  local0  info
    ssl-server-verify none
    maxconn 2000
    daemon
    

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s

listen stats
   mode http
   bind *:18443  ssl crt /etc/ssl/cert/haproxy.pem
   stats enable
   stats show-node
   stats refresh "${HAPROXY_STATS_REFRESH}"
   stats auth "${BASIC_AUTH_USERNAME}:${BASIC_AUTH_PASSWORD}"
   stats uri "${HAPROXY_STATS_URI}"
   stats realm "${BASIC_AUTH_REALM}"

frontend prometheus
    mode http
    bind *:18081
    http-request use-service prometheus-exporter if { path "${HAPROXY_STATS_URI}"/metrics }
#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
frontend http-in
    mode http
    bind *:80
    bind *:443 ssl crt /etc/ssl/cert/haproxy.pem
    redirect scheme https if !{ ssl_fc }

    acl letsencrypt-acl path_beg /.well-known/acme-challenge/
    use_backend constantine-letsencrypt if letsencrypt-acl
    default_backend             constantine-app

frontend scope-in
    mode http
    bind *:8040 ssl crt /etc/ssl/cert/haproxy.pem
    redirect scheme https if !{ ssl_fc }
    default_backend             constantine-scope             

frontend grafana-in
    mode http
    bind *:13000 ssl crt /etc/ssl/cert/haproxy.pem
    redirect scheme https if !{ ssl_fc }
    default_backend             constantine-grafana   
#---------------------------------------------------------------------
# round robin balancing between the various backends
#---------------------------------------------------------------------
backend constantine-app
    mode http
    balance     roundrobin
    option httpchk GET /constantine/heartbeat
    http-check expect status 200
    http-request add-header X-Forwarded-Proto https if { ssl_fc }
    server  constantine_app bot:8443 check

backend constantine-letsencrypt
    server letsencrypt 127.0.0.1:18888

backend constantine-scope
    mode http
    option httpchk GET /api?healthcheck=true
    http-check expect status 401
    http-request add-header X-Forwarded-Proto https if { ssl_fc }
    server constantine_scope scope:4040 check

backend constantine-grafana
    mode http
    option httpchk GET /login
    http-check expect status 200
    server constantine_grafana grafana:3000 check